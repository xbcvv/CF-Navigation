/* 简化版 jQuery，包含必要功能 */
(function(window) {
  function $(selector) {
    if (typeof selector === 'function') {
      document.addEventListener('DOMContentLoaded', selector);
      return;
    }
    
    const result = {
      elements: typeof selector === 'string' 
        ? Array.from(document.querySelectorAll(selector))
        : [selector],
      
      each: function(callback) {
        this.elements.forEach(callback);
        return this;
      },
      
      modal: function(action) {
        return this.each(function(el) {
          if (action === 'show') {
            // 创建遮罩
            let backdrop = document.querySelector('.modal-backdrop');
            if (!backdrop) {
              backdrop = document.createElement('div');
              backdrop.className = 'modal-backdrop';
              document.body.appendChild(backdrop);
            }
            el.style.display = 'block';
            backdrop.style.display = 'block';
          } else if (action === 'hide') {
            el.style.display = 'none';
            const backdrop = document.querySelector('.modal-backdrop');
            if (backdrop) {
              backdrop.style.display = 'none';
            }
          }
        });
      },
      
      addClass: function(className) {
        return this.each(el => el.classList.add(className));
      },
      
      removeClass: function(className) {
        return this.each(el => el.classList.remove(className));
      },
      
      toggleClass: function(className) {
        return this.each(el => el.classList.toggle(className));
      },
      
      on: function(event, handler) {
        return this.each(el => el.addEventListener(event, handler));
      },
      
      val: function(value) {
        if (value === undefined) {
          return this.elements[0] ? this.elements[0].value : undefined;
        }
        return this.each(el => el.value = value);
      },
      
      text: function(value) {
        if (value === undefined) {
          return this.elements[0] ? this.elements[0].textContent : undefined;
        }
        return this.each(el => el.textContent = value);
      },
      
      html: function(value) {
        if (value === undefined) {
          return this.elements[0] ? this.elements[0].innerHTML : undefined;
        }
        return this.each(el => el.innerHTML = value);
      }
    };
    
    return result;
  }
  
  $.fn = $('').constructor.prototype;
  window.$ = $;
})(window); 